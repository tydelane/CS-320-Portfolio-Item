Functionality and security are important considerations in software development. Secure software not only ensures users are safe from malicious attacks from other users, but also that the software handles data appropriately and ensures proper access to its methods and attributes. Besides correctly interpreting user needs and using proper software design methods, there are various types of testing that can and should be utilized throughout the development process to ensure secure software. Some of these methods are manual, and others such as unit testing can be automated. To implement these tests, functional and non-functional requirements are interpreted by software testers into tests that show the software meets the requirements. The testing used throughout this course was white box testing because access to the software’s code was allowed and required to complete the test development. These white-box functionality unit tests use assertions to “Assert” when the requirements are met. Therefore, they are very effective for ensuring secure functionality.

                Interpreting user needs is one of the first steps in determining program requirements. If the needs of the user are misunderstood, this can create a fundamental defect that is difficult to solve using testing. To correctly interpret user needs, it is necessary to conduct product and user research by communicating with users and creating user personas to develop interfaces and functions. Furthermore, goals and questions must be defined to know the proper scope of the research. Once research is finished, the data is analyzed, and usability/functionality decisions are made.

                In approaching software design, preliminary research is very important. It is necessary to not only understand the user needs and product/company goals, but also the methods and technologies that will be best based on those needs and goals. This can mean choosing the right data structures, operating platforms, testing methods, and data storage/transfer methods etc. Furthermore, there are common software design patterns that are useful because they provide a roadmap to a particular software problem. When understood well, these design patterns can ensure more efficient development and proper functionality.